{
  "version": "1.0",
  "project": "Logistic Intel — Settings, Admin, Affiliate",
  "goal": "Add user Settings (avatar/logo/signature), Admin controls (users, plans, coupons), and Affiliate system (accounts, links, clicks, payouts) with SQL, RLS, API routes, and minimal pages.",
  "instructions": [
    {
      "type": "fs.write",
      "path": "supabase/migrations/2025-08-08_settings_admin_affiliates.sql",
      "overwrite": true,
      "content": "-- =========================================================\n-- Logistic Intel — Settings, Admin, Affiliate (no DO blocks)\n-- Safe to re-run. Run on STAGING first.\n-- =========================================================\ncreate extension if not exists pgcrypto;\n\n-- Helpers\ncreate or replace function public.is_admin(p_uid uuid)\nreturns boolean language sql stable as $$\n  select exists (\n    select 1 from auth.users u\n    left join public.user_profiles up on up.id = u.id\n    where u.id = p_uid and ((u.raw_user_meta_data->>'role')='admin' or up.role='admin')\n  );\n$$;\n\ncreate or replace function public.norm_text(t text)\nreturns text language sql immutable as $$\n  select case when t is null then null else trim(regexp_replace(lower(t), '\\\\s+', ' ', 'g')) end;\n$$;\n\ncreate or replace function public.get_user_plan(p_uid uuid)\nreturns text language sql stable as $$\n  select coalesce(up.plan, u.raw_user_meta_data->>'plan', 'trial')\n  from auth.users u left join public.user_profiles up on up.id = u.id\n  where u.id = p_uid;\n$$;\n\n-- user_profiles (extends if already exists)\ncreate table if not exists public.user_profiles (\n  id uuid primary key references auth.users(id) on delete cascade,\n  email text unique,\n  full_name text,\n  company text,\n  role text default 'user' check (role in ('user','admin','enterprise')),\n  plan text default 'trial' check (plan in ('trial','starter','pro','enterprise')),\n  subscription_status text default 'inactive' check (subscription_status in ('active','inactive','trial','cancelled')),\n  avatar_url text,\n  company_logo_url text,\n  sender_name text,\n  sender_email text,\n  signature_html text,\n  signature_plain text,\n  admin_permissions text[] default '{}',\n  features_enabled text[] default '{}',\n  api_usage_count integer default 0,\n  api_usage_limit integer default 100,\n  last_login_at timestamptz,\n  created_at timestamptz default now(),\n  updated_at timestamptz default now()\n);\n\n-- updated_at trigger\ncreate or replace function public.set_updated_at()\nreturns trigger language plpgsql as $f$\nbegin new.updated_at := now(); return new; end\n$f$;\n\ndrop trigger if exists trg_user_profiles_updated_at on public.user_profiles;\ncreate trigger trg_user_profiles_updated_at before update on public.user_profiles\nfor each row execute function public.set_updated_at();\n\nalter table public.user_profiles enable row level security;\ndrop policy if exists \"profiles_self_select\" on public.user_profiles;\ndrop policy if exists \"profiles_self_upsert\" on public.user_profiles;\ndrop policy if exists \"profiles_admin_all\" on public.user_profiles;\n\ncreate policy \"profiles_self_select\" on public.user_profiles for select\n  using (auth.uid() = id or public.is_admin(auth.uid()));\ncreate policy \"profiles_self_upsert\" on public.user_profiles for all\n  using (auth.uid() = id or public.is_admin(auth.uid()))\n  with check (auth.uid() = id or public.is_admin(auth.uid()));\ncreate policy \"profiles_admin_all\" on public.user_profiles for all\n  using (public.is_admin(auth.uid()));\n\n-- Companies minimal columns for unique index (if missing)\nalter table public.companies add column if not exists company_name text;\nalter table public.companies add column if not exists country text;\nalter table public.companies add column if not exists industry text;\nalter table public.companies add column if not exists added_by_user uuid references auth.users(id);\nalter table public.companies add column if not exists created_at timestamptz default now();\n\n-- Scoped uniqueness\ndrop index if exists uq_companies_name_country_by_user;\ncreate unique index uq_companies_name_country_by_user\n  on public.companies (public.norm_text(company_name), public.norm_text(country), added_by_user)\n  where company_name is not null;\n\n-- SHIPMENTS (ensure aligned)\ncreate table if not exists public.shipments (\n  id uuid primary key default gen_random_uuid(),\n  company_id uuid references public.companies(id) on delete cascade,\n  shipment_id text,\n  shipment_type text,\n  arrival_date date,\n  origin_country text,\n  destination_country text,\n  hs_code text,\n  product_description text,\n  weight_kg numeric,\n  created_at timestamptz default now()\n);\nalter table public.shipments add column if not exists company_id uuid references public.companies(id) on delete cascade;\nalter table public.shipments add column if not exists shipment_type text;\nalter table public.shipments drop constraint if exists shipments_type_chk;\nalter table public.shipments add constraint shipments_type_chk check (shipment_type in ('ocean','air'));\ncreate index if not exists idx_shipments_company on public.shipments(company_id);\ncreate index if not exists idx_shipments_arrival on public.shipments(arrival_date);\ncreate index if not exists idx_shipments_type on public.shipments(shipment_type);\ncreate index if not exists idx_shipments_hs on public.shipments(hs_code);\n\nalter table public.shipments enable row level security;\ndrop policy if exists \"shipments_user_rw\" on public.shipments;\ndrop policy if exists \"shipments_admin_all\" on public.shipments;\ncreate policy \"shipments_user_rw\" on public.shipments for all\n  using (exists (select 1 from public.companies c where c.id=shipments.company_id and c.added_by_user=auth.uid()))\n  with check (exists (select 1 from public.companies c where c.id=shipments.company_id and c.added_by_user=auth.uid()));\ncreate policy \"shipments_admin_all\" on public.shipments for all using (public.is_admin(auth.uid()));\n\n-- CRM CONTACTS (ensure aligned)\ncreate table if not exists public.crm_contacts (\n  id uuid primary key default gen_random_uuid(),\n  company_id uuid references public.companies(id) on delete cascade,\n  full_name text,\n  email text,\n  phone text,\n  title text,\n  added_by_user uuid references auth.users(id) on delete cascade,\n  notes text,\n  hs_code text,\n  created_at timestamptz default now(),\n  updated_at timestamptz default now()\n);\nalter table public.crm_contacts add column if not exists company_id uuid references public.companies(id) on delete cascade;\nalter table public.crm_contacts add column if not exists added_by_user uuid references auth.users(id) on delete cascade;\nalter table public.crm_contacts add column if not exists updated_at timestamptz default now();\n\nalter table public.crm_contacts drop constraint if exists uq_crm_company_email;\nalter table public.crm_contacts add constraint uq_crm_company_email unique (company_id, email);\ncreate index if not exists idx_crm_company on public.crm_contacts(company_id);\ncreate index if not exists idx_crm_added_by on public.crm_contacts(added_by_user);\n\ndrop trigger if exists trg_crm_contacts_updated_at on public.crm_contacts;\ncreate trigger trg_crm_contacts_updated_at before update on public.crm_contacts\nfor each row execute function public.set_updated_at();\n\nalter table public.crm_contacts enable row level security;\ndrop policy if exists \"crm_user_rw\" on public.crm_contacts;\ndrop policy if exists \"crm_admin_all\" on public.crm_contacts;\ncreate policy \"crm_user_rw\" on public.crm_contacts for all\n  using (added_by_user = auth.uid()) with check (added_by_user = auth.uid());\ncreate policy \"crm_admin_all\" on public.crm_contacts for all using (public.is_admin(auth.uid()));\n\n-- ADMIN: promo codes\ncreate table if not exists public.promo_codes (\n  id uuid primary key default gen_random_uuid(),\n  code text not null unique,\n  discount_type text not null check (discount_type in ('percent','amount')),\n  discount_value numeric not null,\n  valid_from timestamptz,\n  valid_to timestamptz,\n  max_redemptions int,\n  redemptions_used int default 0,\n  active boolean default true,\n  created_by uuid references auth.users(id),\n  created_at timestamptz default now(),\n  updated_at timestamptz default now()\n);\n\ncreate or replace function public.validate_promo(p_code text)\nreturns table(\n  code text, discount_type text, discount_value numeric, valid boolean, reason text\n) language sql stable as $$\n  select code, discount_type, discount_value,\n    (active is true)\n    and (valid_from is null or now() >= valid_from)\n    and (valid_to is null or now() <= valid_to)\n    and (max_redemptions is null or redemptions_used < max_redemptions) as valid,\n    case\n      when active is not true then 'inactive'\n      when valid_from is not null and now() < valid_from then 'not_started'\n      when valid_to is not null and now() > valid_to then 'expired'\n      when max_redemptions is not null and redemptions_used >= max_redemptions then 'exhausted'\n      else 'ok'\n    end as reason\n  from public.promo_codes where lower(code)=lower(p_code) limit 1;\n$$;\n\nalter table public.promo_codes enable row level security;\ndrop policy if exists \"promo_admin_all\" on public.promo_codes;\ncreate policy \"promo_admin_all\" on public.promo_codes for all using (public.is_admin(auth.uid()));\n\n-- AFFILIATES\ncreate table if not exists public.affiliate_accounts (\n  id uuid primary key default gen_random_uuid(),\n  user_id uuid unique references auth.users(id) on delete cascade,\n  status text default 'pending' check (status in ('pending','active','suspended')),\n  default_rate_percent numeric default 20,\n  payout_method text,\n  payout_address text,\n  created_at timestamptz default now(),\n  updated_at timestamptz default now()\n);\n\ncreate table if not exists public.affiliate_links (\n  id uuid primary key default gen_random_uuid(),\n  affiliate_id uuid references public.affiliate_accounts(id) on delete cascade,\n  code text unique not null,\n  destination_url text,\n  created_at timestamptz default now()\n);\n\ncreate table if not exists public.affiliate_clicks (\n  id uuid primary key default gen_random_uuid(),\n  link_id uuid references public.affiliate_links(id) on delete cascade,\n  clicked_at timestamptz default now(),\n  ip inet,\n  user_agent text,\n  referer text\n);\n\ncreate table if not exists public.affiliate_referrals (\n  id uuid primary key default gen_random_uuid(),\n  link_id uuid references public.affiliate_links(id) on delete cascade,\n  referred_user uuid references auth.users(id),\n  plan text,\n  status text check (status in ('trial','converted','refunded','chargeback')),\n  amount_usd numeric,\n  commission_usd numeric,\n  occurred_at timestamptz default now()\n);\n\ncreate table if not exists public.affiliate_payouts (\n  id uuid primary key default gen_random_uuid(),\n  affiliate_id uuid references public.affiliate_accounts(id) on delete cascade,\n  period_start timestamptz,\n  period_end timestamptz,\n  amount_usd numeric,\n  status text default 'pending' check (status in ('pending','paid','failed')),\n  paid_at timestamptz,\n  notes text\n);\n\n-- RLS: affiliates\nalter table public.affiliate_accounts enable row level security;\nalter table public.affiliate_links enable row level security;\nalter table public.affiliate_clicks enable row level security;\nalter table public.affiliate_referrals enable row level security;\nalter table public.affiliate_payouts enable row level security;\n\n-- Accounts\ndrop policy if exists \"aff_acc_self_rw\" on public.affiliate_accounts;\ndrop policy if exists \"aff_acc_admin_all\" on public.affiliate_accounts;\ncreate policy \"aff_acc_self_rw\" on public.affiliate_accounts for all\n  using (user_id = auth.uid()) with check (user_id = auth.uid());\ncreate policy \"aff_acc_admin_all\" on public.affiliate_accounts for all using (public.is_admin(auth.uid()));\n\n-- Links\ndrop policy if exists \"aff_links_self_rw\" on public.affiliate_links;\ndrop policy if exists \"aff_links_admin_all\" on public.affiliate_links;\ncreate policy \"aff_links_self_rw\" on public.affiliate_links for all\n  using (exists (select 1 from public.affiliate_accounts a where a.id=affiliate_links.affiliate_id and a.user_id=auth.uid()))\n  with check (exists (select 1 from public.affiliate_accounts a where a.id=affiliate_links.affiliate_id and a.user_id=auth.uid()));\ncreate policy \"aff_links_admin_all\" on public.affiliate_links for all using (public.is_admin(auth.uid()));\n\n-- Clicks: allow public insert (tracking pixel), affiliates/admin can select\ndrop policy if exists \"aff_clicks_public_insert\" on public.affiliate_clicks;\ndrop policy if exists \"aff_clicks_aff_select\" on public.affiliate_clicks;\ndrop policy if exists \"aff_clicks_admin_all\" on public.affiliate_clicks;\ncreate policy \"aff_clicks_public_insert\" on public.affiliate_clicks for insert with check (true);\ncreate policy \"aff_clicks_aff_select\" on public.affiliate_clicks for select\n  using (exists (\n    select 1 from public.affiliate_links l\n    join public.affiliate_accounts a on a.id=l.affiliate_id\n    where l.id = affiliate_clicks.link_id and (a.user_id = auth.uid() or public.is_admin(auth.uid()))\n  ));\ncreate policy \"aff_clicks_admin_all\" on public.affiliate_clicks for all using (public.is_admin(auth.uid()));\n\n-- Referrals & Payouts: affiliates can read their rows; admin full\ndrop policy if exists \"aff_ref_self_select\" on public.affiliate_referrals;\ndrop policy if exists \"aff_ref_admin_all\" on public.affiliate_referrals;\ncreate policy \"aff_ref_self_select\" on public.affiliate_referrals for select\n  using (exists (\n    select 1 from public.affiliate_links l\n    join public.affiliate_accounts a on a.id=l.affiliate_id\n    where l.id = affiliate_referrals.link_id and (a.user_id = auth.uid() or public.is_admin(auth.uid()))\n  ));\ncreate policy \"aff_ref_admin_all\" on public.affiliate_referrals for all using (public.is_admin(auth.uid()));\n\ndrop policy if exists \"aff_payouts_self_select\" on public.affiliate_payouts;\ndrop policy if exists \"aff_payouts_admin_all\" on public.affiliate_payouts;\ncreate policy \"aff_payouts_self_select\" on public.affiliate_payouts for select\n  using (exists (select 1 from public.affiliate_accounts a where a.id=affiliate_payouts.affiliate_id and (a.user_id=auth.uid() or public.is_admin(auth.uid()))));\ncreate policy \"aff_payouts_admin_all\" on public.affiliate_payouts for all using (public.is_admin(auth.uid()));\n\n-- Admin seed/confirm\nupdate auth.users set\n  raw_user_meta_data = coalesce(raw_user_meta_data,'{}'::jsonb) || jsonb_build_object('role','admin','plan','enterprise'),\n  email_confirmed_at = now()\nwhere email='info@getb3acon.com';\n\ninsert into public.user_profiles (id,email,full_name,company,role,plan,subscription_status,api_usage_limit)\nselect u.id,u.email,'Admin Test User','Logistic Intel','admin','enterprise','active',999999\nfrom auth.users u where u.email='info@getb3acon.com'\non conflict (id) do update set role='admin',plan='enterprise',subscription_status='active',updated_at=now();\n\n-- Sanity\nselect 'OK' as status,\n  (select count(*) from public.user_profiles) as profiles,\n  (select count(*) from public.promo_codes) as promo_codes,\n  (select count(*) from public.affiliate_accounts) as affiliates;"
    },
    {
      "type": "fs.write",
      "path": "src/lib/supabase-server.ts",
      "overwrite": false,
      "content": "import { cookies } from 'next/headers';\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';\nexport function supabaseServer(){ return createRouteHandlerClient({ cookies }); }\n"
    },
    {
      "type": "fs.write",
      "path": "src/app/api/me/profile/route.ts",
      "overwrite": true,
      "content": "import { NextResponse } from 'next/server';\nimport { supabaseServer } from '@/lib/supabase-server';\nexport const runtime='nodejs'; export const dynamic='force-dynamic';\n\nexport async function GET(){\n  const s = supabaseServer();\n  const { data: { user } } = await s.auth.getUser();\n  if(!user) return NextResponse.json({success:false,error:'Not authenticated'},{status:401});\n  const { data } = await s.from('user_profiles').select('*').eq('id', user.id).maybeSingle();\n  return NextResponse.json({ success:true, profile: data||null });\n}\n\nexport async function PUT(req: Request){\n  const s = supabaseServer();\n  const { data: { user } } = await s.auth.getUser();\n  if(!user) return NextResponse.json({success:false,error:'Not authenticated'},{status:401});\n  const body = await req.json().catch(()=>({}));\n  const patch: any = {};\n  ['full_name','company','sender_name','sender_email','signature_html','signature_plain','avatar_url','company_logo_url'].forEach(k=>{ if(body[k]!==undefined) patch[k]=body[k]; });\n  const { data, error } = await s.from('user_profiles').upsert({ id:user.id, email:user.email, ...patch }, { onConflict:'id' }).select('*').single();\n  if(error) return NextResponse.json({ success:false, error:error.message }, { status:400 });\n  return NextResponse.json({ success:true, profile:data });\n}\n"
    },
    {
      "type": "fs.write",
      "path": "src/app/api/admin/users/route.ts",
      "overwrite": true,
      "content": "import { NextResponse } from 'next/server';\nimport { supabaseServer } from '@/lib/supabase-server';\nasync function assertAdmin(){\n  const s = supabaseServer();\n  const { data: { user } } = await s.auth.getUser();\n  if(!user) return { ok:false, res: NextResponse.json({success:false,error:'Not authenticated'},{status:401}) };\n  const { data } = await s.rpc('is_admin',{ p_uid:user.id });\n  const val = Array.isArray(data)?data[0]:data; if(!val) return { ok:false, res: NextResponse.json({success:false,error:'Forbidden'},{status:403}) };\n  return { ok:true, s };\n}\nexport async function GET(){\n  const g = await assertAdmin(); if(!g.ok) return g.res; const s = g.s!;\n  const { data, error } = await s.from('user_profiles').select('*').order('created_at',{ascending:false});\n  if(error) return NextResponse.json({success:false,error:error.message},{status:400});\n  return NextResponse.json({ success:true, users:data });\n}\nexport async function PATCH(req:Request){\n  const g = await assertAdmin(); if(!g.ok) return g.res; const s=g.s!;\n  const body = await req.json();\n  const { id, role, plan, subscription_status } = body;\n  if(!id) return NextResponse.json({success:false,error:'id required'},{status:400});\n  const { data, error } = await s.from('user_profiles').update({ role, plan, subscription_status }).eq('id', id).select('*').single();\n  if(error) return NextResponse.json({success:false,error:error.message},{status:400});\n  return NextResponse.json({ success:true, user:data });\n}\n"
    },
    {
      "type": "fs.write",
      "path": "src/app/api/admin/coupons/route.ts",
      "overwrite": true,
      "content": "import { NextResponse } from 'next/server';\nimport { supabaseServer } from '@/lib/supabase-server';\nasync function admin(){\n  const s = supabaseServer();\n  const { data: { user } } = await s.auth.getUser();\n  if(!user) return { ok:false, res: NextResponse.json({success:false,error:'Not authenticated'},{status:401}) };\n  const { data } = await s.rpc('is_admin',{ p_uid:user.id });\n  const val = Array.isArray(data)?data[0]:data; if(!val) return { ok:false, res: NextResponse.json({success:false,error:'Forbidden'},{status:403}) };\n  return { ok:true, s, uid:user.id };\n}\nexport async function GET(){ const a=await admin(); if(!a.ok) return a.res; const { data, error } = await a.s.from('promo_codes').select('*').order('created_at',{ascending:false}); if(error) return NextResponse.json({success:false,error:error.message},{status:400}); return NextResponse.json({success:true, codes:data}); }\nexport async function POST(req:Request){ const a=await admin(); if(!a.ok) return a.res; const body=await req.json(); const insert={...body, created_by:a.uid}; const { data, error } = await a.s.from('promo_codes').insert(insert).select('*').single(); if(error) return NextResponse.json({success:false,error:error.message},{status:400}); return NextResponse.json({success:true, code:data}); }\nexport async function PATCH(req:Request){ const a=await admin(); if(!a.ok) return a.res; const body=await req.json(); if(!body.id) return NextResponse.json({success:false,error:'id required'},{status:400}); const { data, error } = await a.s.from('promo_codes').update(body).eq('id', body.id).select('*').single(); if(error) return NextResponse.json({success:false,error:error.message},{status:400}); return NextResponse.json({success:true, code:data}); }\n"
    },
    {
      "type": "fs.write",
      "path": "src/app/api/admin/affiliates/route.ts",
      "overwrite": true,
      "content": "import { NextResponse } from 'next/server';\nimport { supabaseServer } from '@/lib/supabase-server';\nasync function admin(){ const s=supabaseServer(); const { data:{user} }=await s.auth.getUser(); if(!user) return {ok:false,res:NextResponse.json({success:false,error:'Not authenticated'},{status:401})}; const { data }=await s.rpc('is_admin',{p_uid:user.id}); const val=Array.isArray(data)?data[0]:data; if(!val) return {ok:false,res:NextResponse.json({success:false,error:'Forbidden'},{status:403})}; return {ok:true,s};}\nexport async function GET(){ const a=await admin(); if(!a.ok) return a.res; const { data, error } = await a.s.from('affiliate_accounts').select('*, affiliate_links(*), affiliate_payouts(*)').order('created_at',{ascending:false}); if(error) return NextResponse.json({success:false,error:error.message},{status:400}); return NextResponse.json({success:true, affiliates:data}); }\nexport async function POST(req:Request){ const a=await admin(); if(!a.ok) return a.res; const body=await req.json(); const { data, error } = await a.s.from('affiliate_accounts').insert(body).select('*').single(); if(error) return NextResponse.json({success:false,error:error.message},{status:400}); return NextResponse.json({success:true, affiliate:data}); }\nexport async function PATCH(req:Request){ const a=await admin(); if(!a.ok) return a.res; const body=await req.json(); if(!body.id) return NextResponse.json({success:false,error:'id required'},{status:400}); const { data, error } = await a.s.from('affiliate_accounts').update(body).eq('id', body.id).select('*').single(); if(error) return NextResponse.json({success:false,error:error.message},{status:400}); return NextResponse.json({success:true, affiliate:data}); }\n"
    },
    {
      "type": "fs.write",
      "path": "src/app/api/affiliate/me/route.ts",
      "overwrite": true,
      "content": "import { NextResponse } from 'next/server';\nimport { supabaseServer } from '@/lib/supabase-server';\nexport async function GET(){\n  const s = supabaseServer();\n  const { data:{user} } = await s.auth.getUser();\n  if(!user) return NextResponse.json({success:false,error:'Not authenticated'},{status:401});\n  // ensure account exists\n  const { data:acc } = await s.from('affiliate_accounts').select('*').eq('user_id', user.id).maybeSingle();\n  let account = acc;\n  if(!account){\n    const { data, error } = await s.from('affiliate_accounts').insert({ user_id:user.id, status:'pending' }).select('*').single();\n    if(error) return NextResponse.json({success:false,error:error.message},{status:400});\n    account = data;\n  }\n  const { data:links } = await s.from('affiliate_links').select('*').eq('affiliate_id', account.id).order('created_at',{ascending:false});\n  const { data:payouts } = await s.from('affiliate_payouts').select('*').eq('affiliate_id', account.id).order('period_start',{ascending:false});\n  return NextResponse.json({ success:true, account, links:links||[], payouts:payouts||[] });\n}\n"
    },
    {
      "type": "fs.write",
      "path": "src/app/api/affiliate/links/route.ts",
      "overwrite": true,
      "content": "import { NextResponse } from 'next/server';\nimport { supabaseServer } from '@/lib/supabase-server';\nexport async function POST(req:Request){\n  const s = supabaseServer();\n  const { data:{user} } = await s.auth.getUser();\n  if(!user) return NextResponse.json({success:false,error:'Not authenticated'},{status:401});\n  const body = await req.json();\n  const code = (body.code||'').toLowerCase().replace(/[^a-z0-9-]/g,'');\n  if(!code) return NextResponse.json({success:false,error:'code required'},{status:400});\n  const { data:acc, error:e1 } = await s.from('affiliate_accounts').select('*').eq('user_id', user.id).maybeSingle();\n  if(e1||!acc) return NextResponse.json({success:false,error:e1?.message||'affiliate account missing'},{status:400});\n  const { data, error } = await s.from('affiliate_links').insert({ affiliate_id:acc.id, code, destination_url: body.destination_url||null }).select('*').single();\n  if(error) return NextResponse.json({success:false,error:error.message},{status:400});\n  return NextResponse.json({ success:true, link:data });\n}\n"
    },
    {
      "type": "fs.write",
      "path": "src/app/api/affiliate/stats/route.ts",
      "overwrite": true,
      "content": "import { NextResponse } from 'next/server';\nimport { supabaseServer } from '@/lib/supabase-server';\nexport async function GET(){\n  const s = supabaseServer();\n  const { data:{user} } = await s.auth.getUser();\n  if(!user) return NextResponse.json({success:false,error:'Not authenticated'},{status:401});\n  const { data:acc } = await s.from('affiliate_accounts').select('id').eq('user_id', user.id).maybeSingle();\n  if(!acc) return NextResponse.json({success:false,error:'affiliate account not found'},{status:404});\n  const { data:links } = await s.from('affiliate_links').select('id').eq('affiliate_id', acc.id);\n  const linkIds = (links||[]).map(l=>l.id);\n  if(linkIds.length===0) return NextResponse.json({success:true, clicks:0, referrals:0, revenue:0});\n  const { data:clicks } = await s.from('affiliate_clicks').select('id', { count:'exact', head:true }).in('link_id', linkIds);\n  const { data:refs } = await s.from('affiliate_referrals').select('commission_usd').in('link_id', linkIds);\n  const revenue = (refs||[]).reduce((s,v)=> s + (Number(v.commission_usd)||0), 0);\n  return NextResponse.json({ success:true, clicks:(clicks as any)?.length||0, referrals:(refs||[]).length, revenue });\n}\n"
    },
    {
      "type": "fs.write",
      "path": "src/app/api/affiliate/track/route.ts",
      "overwrite": true,
      "content": "import { NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\nexport const dynamic='force-dynamic';\n\n// Use service key to bypass RLS for unauth inserts OR rely on public-insert policy we set\nconst supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY!);\n\nconst GIF = Buffer.from('R0lGODlhAQABAPAAAP///wAAACwAAAAAAQABAAACAkQBADs=', 'base64');\n\nexport async function GET(req: Request){\n  try{\n    const { searchParams } = new URL(req.url);\n    const code = (searchParams.get('code')||'').toLowerCase();\n    if(code){\n      const { data:link } = await supabase.from('affiliate_links').select('id').eq('code', code).maybeSingle();\n      if(link?.id){\n        await supabase.from('affiliate_clicks').insert({ link_id: link.id, user_agent: req.headers.get('user-agent')||null, referer: req.headers.get('referer')||null });\n      }\n    }\n  }catch{}\n  return new NextResponse(GIF, { status:200, headers: { 'Content-Type':'image/gif', 'Cache-Control':'no-store' } });\n}\n"
    },
    {
      "type": "fs.write",
      "path": "src/app/dashboard/settings/page.tsx",
      "overwrite": true,
      "content": "'use client';\nimport { useEffect, useState } from 'react';\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs';\n\nexport default function SettingsPage(){\n  const supabase = createClientComponentClient();\n  const [profile,setProfile]=useState<any>(null);\n  const [saving,setSaving]=useState(false);\n  useEffect(()=>{(async()=>{ const r=await fetch('/api/me/profile'); const j=await r.json(); if(j.success) setProfile(j.profile||{}); })();},[]);\n  if(!profile) return <div className=\"p-6\">Loading…</div>;\n  async function save(){ setSaving(true); await fetch('/api/me/profile',{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(profile)}); setSaving(false); }\n  async function upload(bucket:keyof any, field:string, file:File){ const { data:{ user } } = await supabase.auth.getUser(); if(!user) return; const path=`${user.id}/${field}-${Date.now()}.png`; await supabase.storage.from(bucket).upload(path,file,{upsert:true}); const { data } = supabase.storage.from(bucket).getPublicUrl(path); setProfile((p:any)=>({...p,[field]:data.publicUrl})); }\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <h1 className=\"text-2xl font-bold\">Account Settings</h1>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"bg-white border rounded p-4 space-y-3\">\n          <h2 className=\"font-semibold\">Profile</h2>\n          <input className=\"border p-2 w-full\" placeholder=\"Full name\" value={profile.full_name||''} onChange={e=>setProfile({...profile,full_name:e.target.value})}/>\n          <input className=\"border p-2 w-full\" placeholder=\"Company\" value={profile.company||''} onChange={e=>setProfile({...profile,company:e.target.value})}/>\n          <div>\n            <label className=\"block text-sm mb-1\">Avatar</label>\n            <input type=\"file\" accept=\"image/*\" onChange={e=>e.target.files&&upload('avatars','avatar_url',e.target.files[0])}/>\n            {profile.avatar_url && <img src={profile.avatar_url} alt=\"avatar\" className=\"mt-2 h-12 w-12 rounded-full\"/>}\n          </div>\n          <div>\n            <label className=\"block text-sm mb-1\">Company Logo</label>\n            <input type=\"file\" accept=\"image/*\" onChange={e=>e.target.files&&upload('logos','company_logo_url',e.target.files[0])}/>\n            {profile.company_logo_url && <img src={profile.company_logo_url} alt=\"logo\" className=\"mt-2 h-10\"/>}\n          </div>\n        </div>\n        <div className=\"bg-white border rounded p-4 space-y-3\">\n          <h2 className=\"font-semibold\">Email & Signature</h2>\n          <input className=\"border p-2 w-full\" placeholder=\"Sender Name\" value={profile.sender_name||''} onChange={e=>setProfile({...profile,sender_name:e.target.value})}/>\n          <input className=\"border p-2 w-full\" placeholder=\"Sender Email\" value={profile.sender_email||''} onChange={e=>setProfile({...profile,sender_email:e.target.value})}/>\n          <textarea className=\"border p-2 w-full h-28\" placeholder=\"Signature HTML\" value={profile.signature_html||''} onChange={e=>setProfile({...profile,signature_html:e.target.value})}/>\n        </div>\n      </div>\n      <button onClick={save} disabled={saving} className=\"px-4 py-2 bg-indigo-600 text-white rounded\">{saving?'Saving…':'Save Changes'}</button>\n    </div>\n  );\n}\n"
    },
    {
      "type": "fs.write",
      "path": "src/app/dashboard/admin/page.tsx",
      "overwrite": true,
      "content": "'use client';\nimport { useEffect, useState } from 'react';\nexport default function AdminPage(){\n  const [users,setUsers]=useState<any[]>([]);\n  useEffect(()=>{(async()=>{ const r=await fetch('/api/admin/users'); const j=await r.json(); if(j.success) setUsers(j.users);} )();},[]);\n  return (\n    <div className=\"p-6 space-y-6\">\n      <h1 className=\"text-2xl font-bold\">Admin</h1>\n      <div className=\"bg-white border rounded\">\n        <div className=\"p-4 font-semibold\">Users</div>\n        <table className=\"w-full text-sm\"><thead><tr className=\"bg-gray-50\"><th className=\"p-2 text-left\">Name</th><th className=\"p-2\">Email</th><th className=\"p-2\">Role</th><th className=\"p-2\">Plan</th></tr></thead><tbody>\n          {users.map(u=> (\n            <tr key={u.id} className=\"border-t\"><td className=\"p-2\">{u.full_name||'-'}</td><td className=\"p-2\">{u.email}</td><td className=\"p-2\">{u.role}</td><td className=\"p-2\">{u.plan}</td></tr>\n          ))}\n        </tbody></table>\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "type": "fs.write",
      "path": "src/app/dashboard/admin/affiliates/page.tsx",
      "overwrite": true,
      "content": "'use client';\nimport { useEffect, useState } from 'react';\nexport default function AdminAffiliates(){\n  const [rows,setRows]=useState<any[]>([]);\n  useEffect(()=>{(async()=>{ const r=await fetch('/api/admin/affiliates'); const j=await r.json(); if(j.success) setRows(j.affiliates); })();},[]);\n  return (\n    <div className=\"p-6 space-y-6\">\n      <h1 className=\"text-2xl font-bold\">Affiliates</h1>\n      <div className=\"bg-white border rounded\">\n        <div className=\"p-4 font-semibold\">Accounts</div>\n        <table className=\"w-full text-sm\"><thead><tr className=\"bg-gray-50\"><th className=\"p-2 text-left\">User</th><th className=\"p-2\">Status</th><th className=\"p-2\">Rate %</th><th className=\"p-2\">Links</th></tr></thead><tbody>\n          {rows.map(a=> (\n            <tr key={a.id} className=\"border-t\"><td className=\"p-2\">{a.user_id}</td><td className=\"p-2\">{a.status}</td><td className=\"p-2\">{a.default_rate_percent}</td><td className=\"p-2\">{a.affiliate_links?.length||0}</td></tr>\n          ))}\n        </tbody></table>\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "type": "fs.write",
      "path": "src/app/dashboard/affiliate/page.tsx",
      "overwrite": true,
      "content": "'use client';\nimport { useEffect, useState } from 'react';\nexport default function AffiliatePortal(){\n  const [data,setData]=useState<any>(null);\n  const [code,setCode]=useState('');\n  const [dest,setDest]=useState('');\n  useEffect(()=>{(async()=>{ const r=await fetch('/api/affiliate/me'); const j=await r.json(); if(j.success) setData(j); })();},[]);\n  async function createLink(){ const r=await fetch('/api/affiliate/links',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({code,destination_url:dest})}); const j=await r.json(); if(j.success) setData((d:any)=>({...d,links:[j.link,...(d.links||[])]})); }\n  if(!data) return <div className=\"p-6\">Loading…</div>;\n  return (\n    <div className=\"max-w-3xl mx-auto p-6 space-y-6\">\n      <h1 className=\"text-2xl font-bold\">Affiliate Portal</h1>\n      <div className=\"bg-white border rounded p-4\">\n        <div className=\"font-semibold mb-2\">Your Account</div>\n        <div>Status: <b>{data.account.status}</b> • Default Rate: <b>{data.account.default_rate_percent}%</b></div>\n      </div>\n      <div className=\"bg-white border rounded p-4 space-y-2\">\n        <div className=\"font-semibold\">Create Link</div>\n        <input className=\"border p-2 w-full\" placeholder=\"code (e.g. john-doe)\" value={code} onChange={e=>setCode(e.target.value)} />\n        <input className=\"border p-2 w-full\" placeholder=\"destination URL (optional)\" value={dest} onChange={e=>setDest(e.target.value)} />\n        <button onClick={createLink} className=\"px-3 py-2 bg-indigo-600 text-white rounded\">Create</button>\n      </div>\n      <div className=\"bg-white border rounded p-4\">\n        <div className=\"font-semibold mb-2\">Your Links</div>\n        <ul className=\"list-disc ml-5\">\n          {(data.links||[]).map((l:any)=> (\n            <li key={l.id} className=\"mb-1\">{l.code} — pixel: <code>/api/affiliate/track?code={l.code}</code></li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n"
    }
  ]
}